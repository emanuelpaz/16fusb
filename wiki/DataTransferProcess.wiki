#summary One-sentence summary of this page.

= Data transfer process =

The transfer process starts when the PIC receives the first positive going pulse of the Sync Pattern (coming from D+) on the external interrupt pin (INT/RB0) initalizing the interrupt service (ISR). At the end of the Sync Pattern, ISR receives and immediately saves the bits sent by host in a buffer (RX_BUFFER)  until the end of packet (EOP) is detected. Each bit is read in the receiving loop at the middle of the sample.

After the EOP detection, the type of package that has just arrived is checked. If it's a Token, its destination address is checked to see if data is actually for the device. These two checks are done even before removing the NRZI encoding, because the device is subjected to a maximum time to send a response to the host. This maximum time, in our case, would be easily exceeded if we wait the completion of the decoding process. If the package is really for the device, ACTION_FLAG is filled with a value that will inform MainLoop if the Token is SETUP or OUT (IN will be seen later). This value tells the MainLoop what to do with the data packet coming next.

Using the first pulse of Sync Pattern as reference, which is always a positive going pulse on the pin INT/RB0, is what makes possible these early findings (type and address of the packet), since the values ​​of PIDs are fixed (obviously) and in the case of tokens, the first of the seven address bits immediately follows the last bit of the PID. Thus, we can make comparisons of data directly into NRZI in PID and ADDR fields on Token packets, and in the PID field on data packet.

As the host can send new packets at anytime, the external interrupt of the PIC should always be ready to respond, although there is some internal processing in progress. If there is some processing going on, the response to host should be a NAK, indicating that the device is busy. Thus, host will send the package again at a later time.

When the case is a data packet, the next step of the process is the decoding. The decoding of NRZI data, along with the bit stuffing removal, is done by the ISR. The already decoded package is saved in RXDATA_BUFFER. After decode received bytes, the flow returns from interruption.

If data available in RXDATA_BUFFER are from a SETUP Token, the MainLoop must build the right response in TX_BUFFER if the request has been device-to-host, or perform some other operation on that basis if the request had been host-to-device. For OUT Token data, processing is similar to host-to-device request. If it was a device-to-host request , then the host sends an IN token. At this point a new interrupt starts, but this time after receiving the token, the ISR enters the sending loop of TX_BUFFER.